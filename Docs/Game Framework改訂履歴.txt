Game Framework改訂履歴




☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️☘️🍀☘️☘️☘️☘️☘️☘️
Manesius:Java (2005年)

★2005（長江勝也、沼田哲史）
・2005年後期の授業にて、大阪電気通信大学 デジタルゲーム学科 3回生向けの授業で、コナミより来られた長江勝也教授の作成された Java によるグラディウスの簡易クローン「Manesius」を沼田が改良したものを利用した。

描画用のクラスなども用意されておらず、Player や Enemy クラスの中から直接 Java の API を呼び出している。沼田はこのときはじめてフレーム処理というものを学んだ。またこの学期おわりまでに、ジャンプフラグなどの bool 変数を用意するよりも、有限オートマトンを利用した条件分岐によるキャラクタ動作の実装の利点があることを学ぶことができた。沼田は一般的なアプリケーション・プログラマの立場から、長江先生はゲーム・プログラマとしての立場から、授業内に真っ向勝負で互いの意見をすり合わせた貴重な経験である。ここで得たものは本当に大きい。長江先生への感謝の念は絶えない。


🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳
Manesius 1:OpenGL+OpenAL（2006年）

★2006（長江勝也、沼田哲史）
・2006年後期の授業にて、大阪電気通信大学 デジタルゲーム学科 3回生向けの授業で、Manesius を Mac OS X 上の OpenGL に移植し、OpenAL によるサウンド再生をサポートした。

デジタルゲーム学科の学内アルファベット記号である「W」と、デジタルゲーム学科の「D」から、「WD」をプリフィクスとした各種クラスを用意した。


🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗
WX Framework (Manesius 2〜3)（2007年〜2008年）

★2007（長江勝也、沼田哲史）
・2007年度後期より、大阪電気通信大学 デジタルゲーム学科 3回生向けの授業で、ゲーム処理の部分をフレームワーク化した WX Framework を使用するようになった (Manesius 2)。
・外部フレームワークを利用するため、学生がテクスチャ描画などの実装部分を目にすることはない。

★2008（沼田哲史）
・2008年度後期でも、大阪電気通信大学 デジタルゲーム学科 3回生向けの授業で、そのまま WX Framework を利用している (Manesius 3)。

Manesius 2 ではムービーを使用できるようにして、ビジュアル面での強化を図ったが、教育効果はなかったと後に反省している。その反省を踏まえて、Manesius 3 からはムービーを使用していない。

2008年5月、授業の改善案をいろいろと話し合っていた矢先、長江勝也教授が急逝された。不安の残る中、Manesius 3 を使った授業は単独で行った。


🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡🛡
Karakuri 1 (Manesius 4)（2009年〜2010年）

★2009（沼田哲史）
2009年6月より、大阪電気通信大学 デジタルゲーム学科にて、1〜4年生を集めてゲーム制作を行う iPhone ゲーム開発プロジェクトを提案し、課外授業として立ち上げた。
2009年7月16日 「Karakuri Framework」という名前を決定する。翌日より実装開始。iOS での利用を考え、静的ライブラリとしての提供とした。
2009年7月25日 バージョン0.1をウェブ上で公開。
2009年10月より、大阪電気通信大学 デジタルゲーム学科 3回生向けの授業で利用開始 (Manesius 4)。

2009年度の作品としては、「タイムロックシューターなのか」という作品が3回の授業内で Mac OS X ゲームとして出てきて、これが iPhone ゲームとして移植される形で展開していったのが印象的である。同じ学生の作品として、iPad ゲーム「まわるおまわりさん」も後に Karakuri によって制作された。

★2010（沼田哲史）
2010年2月 Software Design 4月号にて、Karakuri Framework の紹介記事を書く。
2010年2月13日 授業内でのブラッシュアップを受けて、最初の正式バージョンを一般公開。
2010年2月20日 iPhone ゲーム制作プロジェクトの成果ゲーム「Flip Guard」「Irons War」が App Store にて公開開始。
2010年5月 Software Design 4月号にて、Karakuri Framework を活用したプログラミング教育（iPhone ゲーム開発プロジェクト）についての記事を書く。
2010年6月からも、昨年度に引き続き、iPhone ゲーム開発プロジェクトが始動。ここから iPad が対象機種に加わり、iOS ゲーム開発プロジェクトとなる。
2010年7月 Karakuri Box というアプリケーションを作成し、キャラクタアニメーションとパーティクルの作成をツール上で行えるようにした。
2010年度後期でも、大阪電気通信大学 デジタルゲーム学科 2・3回生向けの授業で、Manesius 4 を引き続き使用した。
以後、2011年2月まで保守を続けた。

2010年には、2月と5月の Software Design での記事を執筆したほか、10月には沼田哲史著「実践iPad/iPhoneゲームプログラミング」が秀和システムより発刊された。Karakuri 公開が縁を結んだ、ひとつの成果である。2010年11月には、MOSA Software Meeting 2010 (MSM) にて、iOS ゲーム開発の基礎と、iOS ゲーム開発プロジェクトによる教育方法について講演。2011年3月からは、Software Design 誌において Objective-C プログラミングの連載を開始することとなった。

★2011（沼田哲史）
2011年3月 iOS ゲーム制作プロジェクトの成果ゲーム「Fruits Drops」(iPhone)、「Crest of Strikers」(iPhone)、「Little Sky Wars」(iPad) が App Store にて公開開始。


🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄🍄
Karakuri 2（2011年〜2016年）

★2011/04/26（沼田哲史）
・初期バージョンを「Game Framework」という名前で大阪電気通信大学 デジタルゲーム学科 1年生向けの授業で試用開始。Karakuri 1 での反省を踏まえた新バージョンである。アニメーション作成ツールはなくした。
・授業での利用と保守の利便性を考え、すべてのソースコードをプロジェクト内に格納することとした。

★2011/08/08（沼田哲史）
・新フレームワークを「Karakuri 2」として、大阪電気通信大学 デジタルゲーム学科 iOSゲーム開発チームにて利用開始。

Karakuri 1 までかたくなに「ワールド (World)」と言っていた概念を、Karakuri 2 ではようやく一般的な「シーン (Scene)」という呼び方に変更した。


🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒🐒
 Game Framework (2016年〜)

★2016/06/25 09:40（沼田哲史）
・フレームワークをKarakuri 2からGame Frameworkに名称変更しました。
・主要なクラスのプリフィクスを「GM」に変更しました。
・XNA準拠のGMMathクラスを削除し、Unity準拠のMathfクラスを追加しました。
・GMColor構造体をColor構造体に名称変更しました（Unity準拠）。
・GMMatrix構造体をMatrix4x4構造体に名称変更しました（Unity準拠）。
・GMRect2D構造体をGMRect構造体に名称変更しました（Unity準拠）。
・GMVector2D/3D/4D構造体をVector2/3/4構造体に名称変更しました（Unity準拠）。
・double型メインだったのをfloat型メインに変更しました。

★2016/07/03 13:45（沼田哲史）
・iOSベースの部分を削除しました。
・SceneManagerクラスとScreenクラスを追加しました（SceneクラスはGMSceneクラスを置き換えてUnity準拠にしたもの）。これに伴い、テクスチャやBGMなどのメモリ管理をシーンで行うように変更しました。
・GMQuat構造体をQuaternion構造体に名称変更しました（Unity準拠）。
・GMTexture2DクラスをTextureクラスに名称変更しました。
・時間を管理するためのTimeクラスを追加しました（Unity準拠）。
・GMInput, GMMusic, GMRandom, GMSoundクラスを、プリフィクス「GM」の付かないクラス名に名称変更しました。
・GMStringSupport.hpp/cppをStringSupport.hpp/cppに名称変更しました。これに伴って、GMFS()関数をstring_format()関数に名称変更しました。
・GMEffectクラスを削除しました。
・GMTextReaderクラスを削除し、XMLドキュメント読み込みのためのXmlDocumentクラスを追加しました（tinyxml2を利用）。

★2016/07/03 20:00（沼田哲史）
・GMRenderTarget2DクラスをRenderTargetクラスに名称変更しました。
・GMGameクラスおよびSceneクラスのDraw()関数をRender()関数に名称変更しましました。
・簡易描画のためのSimpleDrawクラスを追加しました。
・GMSpriteBatchクラスをSpriteBatchクラスに名称変更しました。
・Textureクラスにファイル名を保持・取得するための変数と関数を追加しました。
・行列を管理するためのCameraクラスを追加しました。

★2016/07/05 19:39（沼田哲史）
・SpriteBatchクラスとSimpleDrawクラスを削除し、それを統合したBaseRendererクラスを追加しました。
・GMObjectクラスに、C言語文字列とC++文字列のデバッグ文字列を取得するためのto_s()関数とc_str()関数を追加しました。
・GMBlendMode列挙型をBlendMode列挙型に名称変更しました。
・GMButtonクラスとGMLabelクラスを削除しました。
・MathfクラスにUnity準拠のInverseLerp()関数を追加しました。
・Rect構造体の関数をUnity準拠のものに変更しました。
・文字描画のためのTextRendererクラスを追加しました（BaseRendererベース）。
・TextureLoader.mmの中にあったメモリリークを修正しました。
・Vector3, Vector4クラスに、配列のようにアクセスするための[]演算子を追加しました。
・GMGlobals.hファイルとGMGlobals.cppファイルを削除しました。

★2016/07/07 20:20
・GMExceptionクラスを削除し、GameErrorクラスを追加しました。
・Unity準拠にするために、左と右のshiftキーの入力を区別できるようにしました。
・Color構造体, Matrix4x4構造体, Rect構造体の==演算子と!=演算子の実装を変更しました。
・Mathfクラスに、Unity準拠の関数をいくつか追加しました。
・GMDebugクラスを削除し、Unity準拠のDebugクラスを追加しました。
・Quaternionクラス, Vector2クラス, Vector3クラス, Vector4クラスに、Unity準拠の関数を追加しました。
・Vector4構造体の定数名を、Unity準拠のものに変更しました。
・いくつかのC++ヘッダファイルの拡張子を、「.h」から「.hpp」に変更しました。
・GMObjectクラスのC++文字列のためのto_s()関数を、ToString()関数に名称変更しました。

★2016/07/19 22:35
・OpenGL関係の列挙型などを管理するためのGL_class.hppファイルを追加しました。
・OpenGL関係のコマンドをまとめたGLCommandクラスを、GLクラスに名称変更しました。
・Color構造体に、Unity準拠の関数をいくつか追加しました。
・GMViewport構造体を削除し、GMGraphicsクラスで管理していたフレーム矩形を、GLクラスでRect構造体を使って管理するように変更しました。
・デプステストなどの管理フラグを、GLクラスに移動しました。
・Matrix4x4構造体のstatic関数を、Unity準拠の名称に変更しました。
・Quaternion構造体の関数を、Unity準拠の名称に変更しました。
・Randomクラスの関数を、Unity準拠の名称に変更しました。
・いくつかの構造体のデバッグ文字列の生成方法を修正しました。
・Vector3構造体とVector4構造体に、Unity準拠の関数を追加しました。

★2016/07/21 02:45
・Vector2::MoveTowards()関数の引数を修正しました。

★2016/07/22 00:55
・Randomクラスを、インスタンスの生成できないSingletonクラスにするために、コンストラクタをprivateにしました。
・Texture, Music, Soundクラスに、元のファイル名を取得する関数を追加しました。
・XmlDocumentクラスに、メモリ上の文字列をパースするためのヘルパー関数を追加しました。

★2016/07/26 22:00
・いくつかのC++ヘッダファイルの拡張子を、「.h」から「.hpp」に変更しました。

★2016/07/28 15:00
・BaseRendererクラス、Color構造体、GLクラスの引数名を修正しました。
・デバッグ関数のマクロ名を修正しました。

★2016/07/28 18:24
・TextRendererクラスに描画矩形を指定して文字列を描画するためのDrawString()関数を追加しました（未実装）。

★2016/07/29 22:15
・Inputクラスに、backspaceキー、deleteキー、tabキーを表すマスク定数を追加し、それらのキーを処理するための実装をGMOpenGLViewクラスに追加しました。
・Inputクラスに、Unity準拠のGetAxis()関数、GetAxisRaw()関数、ResetInputAxes()関数を追加しました。
・Vector2構造体とVector3構造体の関数の引数名などを修正しました。

★2017/02/04 23:00
・GameMainクラスを削除しました。それに伴い、Game.cppファイルを追加して、この中のStart()関数とUpdate()関数にすべての実装が書けるように修正しました。
・シーン管理の機能を削除し、GMGameクラス内でTexture, Music, Soundクラスのメモリ管理ができるように変更しました。
・単純図形の描画や、画像ファイル名を指定してのテクスチャ描画、BGM/SEの再生が関数単位で行える簡易APIを用意しました。
・画面上にデバッグ文字列を描画するためのPrint()関数を追加しました。
・Color構造体に、初心者フレンドリな名前の色定数（「orange」「pink」「purple」など）と、「light○○」「dark○○」などの名前の色定数を追加しました。
・Color構造体に、アルファ値や各RGB値を変更するためのAlpha()関数、Red()関数、Green()関数、Blue()関数を追加しました。
・リファレンス・マニュアルをPagesで編集するように、HTMLベースのものから変更しました。ルートフォルダにPDF形式のものを書き出しました。
・Retinaディスプレイのサポートを追加しました。

・Musicクラスに、再生速度を変更できるSetRate()関数を追加しました。
・Vector2などが「{0, 0}」のようにリテラル記述できるようにプロジェクト設定を変更しました。
・string_format()関数を、FormatString()関数に名称変更しました。
・Screenクラスに、Vector2で画面サイズを取得できるsize()関数を追加しました。
・ブレンドモードの定数に対応した文字列を取得するためのGetBlendModeName()関数を追加しました。
・デバッグ用のログ出力関数に、ログ出力の回数を表示するようにしました。
・GameFramework.hppヘッダファイルに、std名前空間のusing宣言を追加しました。
・フォルダ構成を修正しました。
・Xcode 2.5用の古いリソースファイルを削除しました。

★2017/02/05 12:10
・Game.cppにコピー＆ペーストするだけで実行可能なサンプルコードを置くための「各種サンプル」フォルダを追加しました。
・円の描画のための角度の分割数を修正しました。
・BaseRendererクラスにおける描画コマンドの処理方法を修正しました。

★2017/02/06 04:00
・「各種サンプル」のサンプルコードをいくつか追加しました（単純図形の描画、オブジェクトのドラッグ、当たり判定、ホーミングの実装、ゲーム実装など）。
・文字列処理のヘルパー関数を追加しました（一部宣言のみで未実装）。
・画面上にデバッグ文字列を描画するためのPrint()関数をPrintf()関数に名称変更しました。
・テンキーの一部のキーをサポートするためのキーマスク定数とその処理を追加しました。
・テキストファイル／バイナリファイルの読み込みをサポートするためのFileクラスを追加しました。
・string_last_path_component()関数をGetLastPathComponent()関数に名称変更しました。
・リソースファイルのパスを取得するためのGetFilepath()関数を追加しました。

★2017/02/06 04:18
・着陸ゲームの宇宙船に炎の噴射を描画するコードを追加しました。

★2017/02/08 01:05
・射撃ゲームのサンプルコードを追加しました。
・左と右の両方のshiftキーを表す「Shift」というキーマスク定数を削除し忘れていたので、削除しました。

★2017/02/09 16:35
・グラデーションをかけて文字列を描画できる、2色の色が指定可能なDrawString()関数をオーバーロードして追加しました。
・Debugクラスのログ出力関数の名前を変更しました。
・エラーメッセージの文字列を日本語に変更しました。

★2017/02/20 06:22
・バックトレースの出力に絵文字を使うように変更しました。
・GMGameクラスのLoadXmlDocument()関数を削除しました。
・エラーの表示方法を修正しました。
・EaseIn()関数, EaseInOut()関数, EaseOut()関数などの引数名を修正しました。
・単純図形の線描画関数に、線の太さの指定が不要なオーバーロード関数を追加しました。これにより、FillCircle()とDrawCircle()のように、Fill系とDraw系の関数が同じ引数を取れるようになります。
・複数の色を指定してグラデーションがかけられるDrawImage()関数をオーバーロードして追加しました。
・PlayMusic()関数などをPlayBGM()関数などに名称変更しました。
・文字列処理のためのStartsWith()関数、EndsWith()関数、ToLower()関数、ToUpper()関数を追加しました。

★2017/02/27 00:00（沼田哲史）
・macOSのフォントを指定して日本語を含む文字列を描画できるようにしました。
・これに伴って、TextRendererクラスを削除しました。

★2017/02/27 03:50
・すべてのEase-InOut関数の実装に誤りがあったのを修正しました。
・Color構造体、Vector2構造体、Vector3構造体、Vector4構造体などにSmoothStep()関数を追加しました。
・GMParticleクラスを削除しました。
・フォントを指定して文字列を描画できるようにしました。
・補間関数の特性比較のためのサンプルコードを追加しました。

★2017/02/27 04:35（沼田哲史）
・Resourcesに自分で追加したTTFフォントを、文字列描画に使用するフォントとして指定できるようにしました。

★2017/02/27 18:45（沼田哲史）
・この改訂履歴のファイルを追加しました。

★2017/02/28 12:12（沼田哲史）
・文字描画用に生成したテクスチャを、1フレーム分キャッシュできる仕組みを用意しました。
・素材利用のクレジット記述用のファイルを追加しました。
・サンプルコードを入れておくフォルダ名を「各種サンプル」から「サンプルコード」に変更しました。
・GMEnums.hppファイルをEnums.hppファイルに名称変更しました。
・3Dゲーム用のGMBoundingBox, GMBoundingFrustum, GMBoundingSphere, GMPlane, GMRayクラスを削除しました。

★2017/02/28 23:58（沼田哲史）
・中央寄せと右寄せでテキスト描画できるDrawTextCenter()関数とDrawTextRight()関数を追加しました。
・魔王魂のBGM素材とSE素材を追加しました。
・暗算ゲームのサンプルコードを追加しました。
・現在のAPI仕様で動作するように、各種サンプルコードを修正しました。

★2017/03/01 21:33（沼田哲史）
・パッティングのサンプルコードを追加しました（実装中）。

★2017/03/01 23:12（沼田哲史）
・CRYSTALのサンプルコードを追加しました（実装中）。
・静的解析を行い、GetFilepath()関数および文字列描画用のテクスチャ作成のための__CreateStringTexture()関数におけるメモリリークを修正しました。

★2017/03/01 23:46（沼田哲史）
・画面上へのデバッグ文字列の描画色を白（黒背景）から青（白背景）に変更しました。
・文字列描画のテクスチャを作成する際に、2倍のサイズで作成するように変更しました。

★2017/03/02 09:45（沼田哲史）
・HTMLの色指定を文字列としてそのまま利用できるColor構造体のコンストラクタを追加しました。例：Color("6495ed")

★2017/06/28 15:20（沼田哲史）
・描画先の中心座標を指定できる画像の描画関数を追加しました。
・描画先の矩形を指定できる画像の描画関数を追加しました。
・HTMLの色指定を16進数の整数値としてそのまま利用できるColor構造体のコンストラクタを追加しました。例：Color(0x6495ed)
・

